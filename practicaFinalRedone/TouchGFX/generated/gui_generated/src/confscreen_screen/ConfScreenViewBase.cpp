/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/confscreen_screen/ConfScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

ConfScreenViewBase::ConfScreenViewBase() :
    flexButtonCallback(this, &ConfScreenViewBase::flexButtonCallbackHandler)
{

    __background.setPosition(0, 0, 240, 320);
    __background.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));

    backGround.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_PORTRAIT_240X320PX_ID));
    backGround.setPosition(0, 0, 240, 320);
    backGround.setOffset(0, 0);

    dataBarConf.setXY(0, 0);

    botBackground.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_PORTRAIT_240X320PX_ID));
    botBackground.setPosition(0, 270, 240, 50);
    botBackground.setOffset(0, 0);

    homeButon.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID), Bitmap(BITMAP_BLUE_ICONS_HOME_32_ID));
    homeButon.setIconXY(14, 9);
    homeButon.setPosition(0, 270, 60, 50);
    homeButon.setAction(flexButtonCallback);

    botSlide.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_PORTRAIT_240X320PX_ID));
    botSlide.setPosition(5, 197, 230, 50);
    botSlide.setOffset(0, 0);

    midSlide.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_PORTRAIT_240X320PX_ID));
    midSlide.setPosition(5, 125, 230, 50);
    midSlide.setOffset(0, 0);

    topSlide.setBitmap(touchgfx::Bitmap(BITMAP_BLUE_BACKGROUNDS_MAIN_BG_PORTRAIT_240X320PX_ID));
    topSlide.setPosition(5, 53, 230, 50);
    topSlide.setOffset(0, 0);

    botMinus.setIconBitmaps(Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID));
    botMinus.setIconXY(14, 9);
    botMinus.setPosition(5, 197, 60, 50);
    botMinus.setAction(flexButtonCallback);

    midMinus.setIconBitmaps(Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID));
    midMinus.setIconXY(14, 9);
    midMinus.setPosition(5, 125, 60, 50);
    midMinus.setAction(flexButtonCallback);

    topMinus.setIconBitmaps(Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_REMOVE_CIRCLE_OUTLINE_32PX_ID));
    topMinus.setIconXY(14, 9);
    topMinus.setPosition(5, 53, 60, 50);
    topMinus.setAction(flexButtonCallback);

    botPlus.setIconBitmaps(Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID));
    botPlus.setIconXY(14, 9);
    botPlus.setPosition(175, 197, 60, 50);
    botPlus.setAction(flexButtonCallback);

    midPlus.setIconBitmaps(Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID));
    midPlus.setIconXY(14, 9);
    midPlus.setPosition(175, 125, 60, 50);
    midPlus.setAction(flexButtonCallback);

    topPlus.setIconBitmaps(Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID), Bitmap(BITMAP_ADD_CIRCLE_OUTLINE_32PX_ID));
    topPlus.setIconXY(14, 9);
    topPlus.setPosition(175, 53, 60, 50);
    topPlus.setAction(flexButtonCallback);

    minTempDesc.setXY(66, 203);
    minTempDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    minTempDesc.setLinespacing(0);
    minTempDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID11));

    maxTempDesc.setXY(65, 135);
    maxTempDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    maxTempDesc.setLinespacing(0);
    maxTempDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));

    camDesc.setXY(70, 59);
    camDesc.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    camDesc.setLinespacing(0);
    camDesc.setTypedText(touchgfx::TypedText(T_SINGLEUSEID9));

    fpsConf.setXY(85, 72);
    fpsConf.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    fpsConf.setLinespacing(0);
    Unicode::snprintf(fpsConfBuffer, FPSCONF_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID13).getText());
    fpsConf.setWildcard(fpsConfBuffer);
    fpsConf.resizeToCurrentText();
    fpsConf.setTypedText(touchgfx::TypedText(T_SINGLEUSEID12));

    maxTempConf.setXY(99, 148);
    maxTempConf.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    maxTempConf.setLinespacing(0);
    Unicode::snprintf(maxTempConfBuffer, MAXTEMPCONF_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID15).getText());
    maxTempConf.setWildcard(maxTempConfBuffer);
    maxTempConf.resizeToCurrentText();
    maxTempConf.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));

    minTempConf.setXY(99, 216);
    minTempConf.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    minTempConf.setLinespacing(0);
    Unicode::snprintf(minTempConfBuffer, MINTEMPCONF_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID17).getText());
    minTempConf.setWildcard(minTempConfBuffer);
    minTempConf.resizeToCurrentText();
    minTempConf.setTypedText(touchgfx::TypedText(T_SINGLEUSEID16));

    add(__background);
    add(backGround);
    add(dataBarConf);
    add(botBackground);
    add(homeButon);
    add(botSlide);
    add(midSlide);
    add(topSlide);
    add(botMinus);
    add(midMinus);
    add(topMinus);
    add(botPlus);
    add(midPlus);
    add(topPlus);
    add(minTempDesc);
    add(maxTempDesc);
    add(camDesc);
    add(fpsConf);
    add(maxTempConf);
    add(minTempConf);
}

void ConfScreenViewBase::setupScreen()
{
    dataBarConf.initialize();
}

void ConfScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &homeButon)
    {
        //Interaction_homeButton
        //When homeButon clicked change screen to MainScreen
        //Go to MainScreen with screen transition towards East
        application().gotoMainScreenScreenWipeTransitionEast();
    }
    else if (&src == &botMinus)
    {
        //Interaction_botMinus
        //When botMinus clicked call virtual function
        //Call MinusMinTemp
        MinusMinTemp();
    }
    else if (&src == &midMinus)
    {
        //Interaction_midMinus
        //When midMinus clicked call virtual function
        //Call MinusMaxTemp
        MinusMaxTemp();
    }
    else if (&src == &topMinus)
    {
        //Interaction_topMinus
        //When topMinus clicked call virtual function
        //Call MinusFPS
        MinusFPS();
    }
    else if (&src == &botPlus)
    {
        //Interaction_botPlus
        //When botPlus clicked call virtual function
        //Call PlusMinTemp
        PlusMinTemp();
    }
    else if (&src == &midPlus)
    {
        //Interaction_midPlus
        //When midPlus clicked call virtual function
        //Call PlusMaxTemp
        PlusMaxTemp();
    }
    else if (&src == &topPlus)
    {
        //Interaction_topPlus
        //When topPlus clicked call virtual function
        //Call PlusFPS
        PlusFPS();
    }
}
